# coding: utf-8

"""
    Web of Science API Lite

    A responsive API that supports rich searching across the Web of Science Core Collection to retrieve core article metadata.  This service provides a great way to reuse Web of Science data both internally and externally to enhance  institutional repositories and research networking systems with best-in-class data. This API supports searching across the Web of Science to retrieve item-level metadata with limited fields:  - UT (Unique Identifier) - Authors - Author keywords - Document type - Title - Issue - Pages - Publication date - Source title - Volume - DOI - ISBN - ISSN   The API supports JSON and XML responses, and this documentation supports trying both response types.   # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from woslite_client.api_client import ApiClient


class IntegrationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def id_unique_id_get(self, database_id, unique_id, count, first_record, **kwargs):  # noqa: E501
        """Find record(s) by specific id  # noqa: E501

        This operation returns a record identified by a unique identifier. You may specify multiple identifiers in a single request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_unique_id_get(database_id, unique_id, count, first_record, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_id: Database to search. Must be a valid database ID, one of the following: BCI/BIOABS/BIOSIS/CCC/DCI/DIIDW/MEDLINE/WOK/WOS/ZOOREC. WOK represents all databases. (required)
        :param str unique_id: Primary item(s) id to be searched, ex: WOS:000270372400005. Cannot be null or an empty string. Multiple values are separated by comma. (required)
        :param int count: Number of records returned in the request (required)
        :param int first_record: Specific record, if any within the result set to return. Cannot be less than 1 and greater than 100000. (required)
        :param str lang: Language of search. This element can take only one value: en for English. If no language is specified, English is passed by default.
        :param str sort_field: Order by field(s). Field name and order by clause separated by '+', use A for ASC and D for DESC, ex: PY+D. Multiple values are separated by comma.
        :return: WosLiteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_unique_id_get_with_http_info(database_id, unique_id, count, first_record, **kwargs)  # noqa: E501
        else:
            (data) = self.id_unique_id_get_with_http_info(database_id, unique_id, count, first_record, **kwargs)  # noqa: E501
            return data

    def id_unique_id_get_with_http_info(self, database_id, unique_id, count, first_record, **kwargs):  # noqa: E501
        """Find record(s) by specific id  # noqa: E501

        This operation returns a record identified by a unique identifier. You may specify multiple identifiers in a single request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_unique_id_get_with_http_info(database_id, unique_id, count, first_record, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_id: Database to search. Must be a valid database ID, one of the following: BCI/BIOABS/BIOSIS/CCC/DCI/DIIDW/MEDLINE/WOK/WOS/ZOOREC. WOK represents all databases. (required)
        :param str unique_id: Primary item(s) id to be searched, ex: WOS:000270372400005. Cannot be null or an empty string. Multiple values are separated by comma. (required)
        :param int count: Number of records returned in the request (required)
        :param int first_record: Specific record, if any within the result set to return. Cannot be less than 1 and greater than 100000. (required)
        :param str lang: Language of search. This element can take only one value: en for English. If no language is specified, English is passed by default.
        :param str sort_field: Order by field(s). Field name and order by clause separated by '+', use A for ASC and D for DESC, ex: PY+D. Multiple values are separated by comma.
        :return: WosLiteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['database_id', 'unique_id', 'count', 'first_record', 'lang', 'sort_field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_unique_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_id' is set
        if ('database_id' not in params or
                params['database_id'] is None):
            raise ValueError("Missing the required parameter `database_id` when calling `id_unique_id_get`")  # noqa: E501
        # verify the required parameter 'unique_id' is set
        if ('unique_id' not in params or
                params['unique_id'] is None):
            raise ValueError("Missing the required parameter `unique_id` when calling `id_unique_id_get`")  # noqa: E501
        # verify the required parameter 'count' is set
        if ('count' not in params or
                params['count'] is None):
            raise ValueError("Missing the required parameter `count` when calling `id_unique_id_get`")  # noqa: E501
        # verify the required parameter 'first_record' is set
        if ('first_record' not in params or
                params['first_record'] is None):
            raise ValueError("Missing the required parameter `first_record` when calling `id_unique_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unique_id' in params:
            path_params['uniqueId'] = params['unique_id']  # noqa: E501

        query_params = []
        if 'database_id' in params:
            query_params.append(('databaseId', params['database_id']))  # noqa: E501
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'first_record' in params:
            query_params.append(('firstRecord', params['first_record']))  # noqa: E501
        if 'sort_field' in params:
            query_params.append(('sortField', params['sort_field']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['key']  # noqa: E501

        return self.api_client.call_api(
            '/id/{uniqueId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WosLiteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
