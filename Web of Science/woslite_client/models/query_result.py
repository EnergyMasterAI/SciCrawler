# coding: utf-8

"""
    Web of Science API Lite

    A responsive API that supports rich searching across the Web of Science Core Collection to retrieve core article metadata.  This service provides a great way to reuse Web of Science data both internally and externally to enhance  institutional repositories and research networking systems with best-in-class data. This API supports searching across the Web of Science to retrieve item-level metadata with limited fields:  - UT (Unique Identifier) - Authors - Author keywords - Document type - Title - Issue - Pages - Publication date - Source title - Volume - DOI - ISBN - ISSN   The API supports JSON and XML responses, and this documentation supports trying both response types.   # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QueryResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'query_id': 'int',
        'records_searched': 'int',
        'records_found': 'int'
    }

    attribute_map = {
        'query_id': 'QueryID',
        'records_searched': 'RecordsSearched',
        'records_found': 'RecordsFound'
    }

    def __init__(self, query_id=None, records_searched=None, records_found=None):  # noqa: E501
        """QueryResult - a model defined in Swagger"""  # noqa: E501
        self._query_id = None
        self._records_searched = None
        self._records_found = None
        self.discriminator = None
        if query_id is not None:
            self.query_id = query_id
        if records_searched is not None:
            self.records_searched = records_searched
        if records_found is not None:
            self.records_found = records_found

    @property
    def query_id(self):
        """Gets the query_id of this QueryResult.  # noqa: E501

        The ID of the query that can be used for pagination.  Note: The id will expire after four hours (session duration) and during a session you can have maximum 2,500 Queries.  The QueryIDs will be reused (starting from 1) if more than 2,500 queries are requested within a session.  The session will expire after four hours inactivity,  i.e. no requests with the token.  Use always `x-paginate-by-query-id` Header to paginate through records. The response time will be faster by using QueryID.   # noqa: E501

        :return: The query_id of this QueryResult.  # noqa: E501
        :rtype: int
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id):
        """Sets the query_id of this QueryResult.

        The ID of the query that can be used for pagination.  Note: The id will expire after four hours (session duration) and during a session you can have maximum 2,500 Queries.  The QueryIDs will be reused (starting from 1) if more than 2,500 queries are requested within a session.  The session will expire after four hours inactivity,  i.e. no requests with the token.  Use always `x-paginate-by-query-id` Header to paginate through records. The response time will be faster by using QueryID.   # noqa: E501

        :param query_id: The query_id of this QueryResult.  # noqa: E501
        :type: int
        """

        self._query_id = query_id

    @property
    def records_searched(self):
        """Gets the records_searched of this QueryResult.  # noqa: E501

        The overrall number of records available in Web of Science.  # noqa: E501

        :return: The records_searched of this QueryResult.  # noqa: E501
        :rtype: int
        """
        return self._records_searched

    @records_searched.setter
    def records_searched(self, records_searched):
        """Sets the records_searched of this QueryResult.

        The overrall number of records available in Web of Science.  # noqa: E501

        :param records_searched: The records_searched of this QueryResult.  # noqa: E501
        :type: int
        """

        self._records_searched = records_searched

    @property
    def records_found(self):
        """Gets the records_found of this QueryResult.  # noqa: E501

        The number of records of your request that are filtered through usrQuery but as well other query parameters.  # noqa: E501

        :return: The records_found of this QueryResult.  # noqa: E501
        :rtype: int
        """
        return self._records_found

    @records_found.setter
    def records_found(self, records_found):
        """Sets the records_found of this QueryResult.

        The number of records of your request that are filtered through usrQuery but as well other query parameters.  # noqa: E501

        :param records_found: The records_found of this QueryResult.  # noqa: E501
        :type: int
        """

        self._records_found = records_found

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QueryResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
