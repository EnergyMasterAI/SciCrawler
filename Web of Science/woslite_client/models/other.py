# coding: utf-8

"""
    Web of Science API Lite

    A responsive API that supports rich searching across the Web of Science Core Collection to retrieve core article metadata.  This service provides a great way to reuse Web of Science data both internally and externally to enhance  institutional repositories and research networking systems with best-in-class data. This API supports searching across the Web of Science to retrieve item-level metadata with limited fields:  - UT (Unique Identifier) - Authors - Author keywords - Document type - Title - Issue - Pages - Publication date - Source title - Volume - DOI - ISBN - ISSN   The API supports JSON and XML responses, and this documentation supports trying both response types.   # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Other(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier_eissn': 'list[str]',
        'contributor_researcher_id_researcher_i_ds': 'list[str]',
        'contributor_researcher_id_names': 'list[str]',
        'identifier_doi': 'list[str]',
        'identifier_issn': 'list[str]',
        'identifier_article_no': 'list[str]',
        'identifier_isbn': 'list[str]',
        'researcher_id_disclaimer': 'list[str]',
        'identifier_xref_doi': 'list[str]',
        'identifier_ids': 'list[str]'
    }

    attribute_map = {
        'identifier_eissn': 'Identifier.Eissn',
        'contributor_researcher_id_researcher_i_ds': 'Contributor.ResearcherID.ResearcherIDs',
        'contributor_researcher_id_names': 'Contributor.ResearcherID.Names',
        'identifier_doi': 'Identifier.Doi',
        'identifier_issn': 'Identifier.Issn',
        'identifier_article_no': 'Identifier.article_no',
        'identifier_isbn': 'Identifier.Isbn',
        'researcher_id_disclaimer': 'ResearcherID.Disclaimer',
        'identifier_xref_doi': 'Identifier.Xref_Doi',
        'identifier_ids': 'Identifier.Ids'
    }

    def __init__(self, identifier_eissn=None, contributor_researcher_id_researcher_i_ds=None, contributor_researcher_id_names=None, identifier_doi=None, identifier_issn=None, identifier_article_no=None, identifier_isbn=None, researcher_id_disclaimer=None, identifier_xref_doi=None, identifier_ids=None):  # noqa: E501
        """Other - a model defined in Swagger"""  # noqa: E501
        self._identifier_eissn = None
        self._contributor_researcher_id_researcher_i_ds = None
        self._contributor_researcher_id_names = None
        self._identifier_doi = None
        self._identifier_issn = None
        self._identifier_article_no = None
        self._identifier_isbn = None
        self._researcher_id_disclaimer = None
        self._identifier_xref_doi = None
        self._identifier_ids = None
        self.discriminator = None
        if identifier_eissn is not None:
            self.identifier_eissn = identifier_eissn
        if contributor_researcher_id_researcher_i_ds is not None:
            self.contributor_researcher_id_researcher_i_ds = contributor_researcher_id_researcher_i_ds
        if contributor_researcher_id_names is not None:
            self.contributor_researcher_id_names = contributor_researcher_id_names
        if identifier_doi is not None:
            self.identifier_doi = identifier_doi
        if identifier_issn is not None:
            self.identifier_issn = identifier_issn
        if identifier_article_no is not None:
            self.identifier_article_no = identifier_article_no
        if identifier_isbn is not None:
            self.identifier_isbn = identifier_isbn
        if researcher_id_disclaimer is not None:
            self.researcher_id_disclaimer = researcher_id_disclaimer
        if identifier_xref_doi is not None:
            self.identifier_xref_doi = identifier_xref_doi
        if identifier_ids is not None:
            self.identifier_ids = identifier_ids

    @property
    def identifier_eissn(self):
        """Gets the identifier_eissn of this Other.  # noqa: E501

        Electronic International Standard Identifier Number. [What is an ISSN?](https://www.issn.org/understanding-the-issn/what-is-an-issn/)  # noqa: E501

        :return: The identifier_eissn of this Other.  # noqa: E501
        :rtype: list[str]
        """
        return self._identifier_eissn

    @identifier_eissn.setter
    def identifier_eissn(self, identifier_eissn):
        """Sets the identifier_eissn of this Other.

        Electronic International Standard Identifier Number. [What is an ISSN?](https://www.issn.org/understanding-the-issn/what-is-an-issn/)  # noqa: E501

        :param identifier_eissn: The identifier_eissn of this Other.  # noqa: E501
        :type: list[str]
        """

        self._identifier_eissn = identifier_eissn

    @property
    def contributor_researcher_id_researcher_i_ds(self):
        """Gets the contributor_researcher_id_researcher_i_ds of this Other.  # noqa: E501

        ResearcherID provided from Web of Science. [What is my Web of Science ResearcherID?](https://publons.freshdesk.com/support/solutions/articles/12000038281-what-is-my-web-of-science-researcherid-)  # noqa: E501

        :return: The contributor_researcher_id_researcher_i_ds of this Other.  # noqa: E501
        :rtype: list[str]
        """
        return self._contributor_researcher_id_researcher_i_ds

    @contributor_researcher_id_researcher_i_ds.setter
    def contributor_researcher_id_researcher_i_ds(self, contributor_researcher_id_researcher_i_ds):
        """Sets the contributor_researcher_id_researcher_i_ds of this Other.

        ResearcherID provided from Web of Science. [What is my Web of Science ResearcherID?](https://publons.freshdesk.com/support/solutions/articles/12000038281-what-is-my-web-of-science-researcherid-)  # noqa: E501

        :param contributor_researcher_id_researcher_i_ds: The contributor_researcher_id_researcher_i_ds of this Other.  # noqa: E501
        :type: list[str]
        """

        self._contributor_researcher_id_researcher_i_ds = contributor_researcher_id_researcher_i_ds

    @property
    def contributor_researcher_id_names(self):
        """Gets the contributor_researcher_id_names of this Other.  # noqa: E501

        The author names in the same order from `Contributor.ResearcherID.ResearcherIDs`  # noqa: E501

        :return: The contributor_researcher_id_names of this Other.  # noqa: E501
        :rtype: list[str]
        """
        return self._contributor_researcher_id_names

    @contributor_researcher_id_names.setter
    def contributor_researcher_id_names(self, contributor_researcher_id_names):
        """Sets the contributor_researcher_id_names of this Other.

        The author names in the same order from `Contributor.ResearcherID.ResearcherIDs`  # noqa: E501

        :param contributor_researcher_id_names: The contributor_researcher_id_names of this Other.  # noqa: E501
        :type: list[str]
        """

        self._contributor_researcher_id_names = contributor_researcher_id_names

    @property
    def identifier_doi(self):
        """Gets the identifier_doi of this Other.  # noqa: E501

        Digital Object Identifier  # noqa: E501

        :return: The identifier_doi of this Other.  # noqa: E501
        :rtype: list[str]
        """
        return self._identifier_doi

    @identifier_doi.setter
    def identifier_doi(self, identifier_doi):
        """Sets the identifier_doi of this Other.

        Digital Object Identifier  # noqa: E501

        :param identifier_doi: The identifier_doi of this Other.  # noqa: E501
        :type: list[str]
        """

        self._identifier_doi = identifier_doi

    @property
    def identifier_issn(self):
        """Gets the identifier_issn of this Other.  # noqa: E501

        International Standard Identifier Number. [What is an ISSN?](https://www.issn.org/understanding-the-issn/what-is-an-issn/)  # noqa: E501

        :return: The identifier_issn of this Other.  # noqa: E501
        :rtype: list[str]
        """
        return self._identifier_issn

    @identifier_issn.setter
    def identifier_issn(self, identifier_issn):
        """Sets the identifier_issn of this Other.

        International Standard Identifier Number. [What is an ISSN?](https://www.issn.org/understanding-the-issn/what-is-an-issn/)  # noqa: E501

        :param identifier_issn: The identifier_issn of this Other.  # noqa: E501
        :type: list[str]
        """

        self._identifier_issn = identifier_issn

    @property
    def identifier_article_no(self):
        """Gets the identifier_article_no of this Other.  # noqa: E501

        Article Number  # noqa: E501

        :return: The identifier_article_no of this Other.  # noqa: E501
        :rtype: list[str]
        """
        return self._identifier_article_no

    @identifier_article_no.setter
    def identifier_article_no(self, identifier_article_no):
        """Sets the identifier_article_no of this Other.

        Article Number  # noqa: E501

        :param identifier_article_no: The identifier_article_no of this Other.  # noqa: E501
        :type: list[str]
        """

        self._identifier_article_no = identifier_article_no

    @property
    def identifier_isbn(self):
        """Gets the identifier_isbn of this Other.  # noqa: E501

        International Standard Book Number. [What is an ISBN?](https://www.isbn-international.org/content/what-isbn)  # noqa: E501

        :return: The identifier_isbn of this Other.  # noqa: E501
        :rtype: list[str]
        """
        return self._identifier_isbn

    @identifier_isbn.setter
    def identifier_isbn(self, identifier_isbn):
        """Sets the identifier_isbn of this Other.

        International Standard Book Number. [What is an ISBN?](https://www.isbn-international.org/content/what-isbn)  # noqa: E501

        :param identifier_isbn: The identifier_isbn of this Other.  # noqa: E501
        :type: list[str]
        """

        self._identifier_isbn = identifier_isbn

    @property
    def researcher_id_disclaimer(self):
        """Gets the researcher_id_disclaimer of this Other.  # noqa: E501

        Dislaimer for ResearcherID  # noqa: E501

        :return: The researcher_id_disclaimer of this Other.  # noqa: E501
        :rtype: list[str]
        """
        return self._researcher_id_disclaimer

    @researcher_id_disclaimer.setter
    def researcher_id_disclaimer(self, researcher_id_disclaimer):
        """Sets the researcher_id_disclaimer of this Other.

        Dislaimer for ResearcherID  # noqa: E501

        :param researcher_id_disclaimer: The researcher_id_disclaimer of this Other.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["ResearcherID data provided by Clarivate Analytics"]  # noqa: E501
        if not set(researcher_id_disclaimer).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `researcher_id_disclaimer` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(researcher_id_disclaimer) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._researcher_id_disclaimer = researcher_id_disclaimer

    @property
    def identifier_xref_doi(self):
        """Gets the identifier_xref_doi of this Other.  # noqa: E501

        Digital Object Identifier  # noqa: E501

        :return: The identifier_xref_doi of this Other.  # noqa: E501
        :rtype: list[str]
        """
        return self._identifier_xref_doi

    @identifier_xref_doi.setter
    def identifier_xref_doi(self, identifier_xref_doi):
        """Sets the identifier_xref_doi of this Other.

        Digital Object Identifier  # noqa: E501

        :param identifier_xref_doi: The identifier_xref_doi of this Other.  # noqa: E501
        :type: list[str]
        """

        self._identifier_xref_doi = identifier_xref_doi

    @property
    def identifier_ids(self):
        """Gets the identifier_ids of this Other.  # noqa: E501

        The IDS Number is included in the export from Web of Science to Researcher Solutions products. The ISI Document Delivery Number is used to uniquely identify documents that can be delivered via IDS. It is of no particular use if the user does not wish to use our document delivery.  # noqa: E501

        :return: The identifier_ids of this Other.  # noqa: E501
        :rtype: list[str]
        """
        return self._identifier_ids

    @identifier_ids.setter
    def identifier_ids(self, identifier_ids):
        """Sets the identifier_ids of this Other.

        The IDS Number is included in the export from Web of Science to Researcher Solutions products. The ISI Document Delivery Number is used to uniquely identify documents that can be delivered via IDS. It is of no particular use if the user does not wish to use our document delivery.  # noqa: E501

        :param identifier_ids: The identifier_ids of this Other.  # noqa: E501
        :type: list[str]
        """

        self._identifier_ids = identifier_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Other, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Other):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
