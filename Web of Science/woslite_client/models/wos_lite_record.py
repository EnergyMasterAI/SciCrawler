# coding: utf-8

"""
    Web of Science API Lite

    A responsive API that supports rich searching across the Web of Science Core Collection to retrieve core article metadata.  This service provides a great way to reuse Web of Science data both internally and externally to enhance  institutional repositories and research networking systems with best-in-class data. This API supports searching across the Web of Science to retrieve item-level metadata with limited fields:  - UT (Unique Identifier) - Authors - Author keywords - Document type - Title - Issue - Pages - Publication date - Source title - Volume - DOI - ISBN - ISSN   The API supports JSON and XML responses, and this documentation supports trying both response types.   # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WosLiteRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ut': 'str',
        'title': 'WosLiteRecordTitle',
        'doctype': 'Doctype',
        'source': 'Source',
        'author': 'Author',
        'keyword': 'Keyword',
        'other': 'Other'
    }

    attribute_map = {
        'ut': 'UT',
        'title': 'Title',
        'doctype': 'Doctype',
        'source': 'Source',
        'author': 'Author',
        'keyword': 'Keyword',
        'other': 'Other'
    }

    def __init__(self, ut=None, title=None, doctype=None, source=None, author=None, keyword=None, other=None):  # noqa: E501
        """WosLiteRecord - a model defined in Swagger"""  # noqa: E501
        self._ut = None
        self._title = None
        self._doctype = None
        self._source = None
        self._author = None
        self._keyword = None
        self._other = None
        self.discriminator = None
        if ut is not None:
            self.ut = ut
        if title is not None:
            self.title = title
        if doctype is not None:
            self.doctype = doctype
        if source is not None:
            self.source = source
        if author is not None:
            self.author = author
        if keyword is not None:
            self.keyword = keyword
        if other is not None:
            self.other = other

    @property
    def ut(self):
        """Gets the ut of this WosLiteRecord.  # noqa: E501

        The unique identifier of Web of Science Record  # noqa: E501

        :return: The ut of this WosLiteRecord.  # noqa: E501
        :rtype: str
        """
        return self._ut

    @ut.setter
    def ut(self, ut):
        """Sets the ut of this WosLiteRecord.

        The unique identifier of Web of Science Record  # noqa: E501

        :param ut: The ut of this WosLiteRecord.  # noqa: E501
        :type: str
        """

        self._ut = ut

    @property
    def title(self):
        """Gets the title of this WosLiteRecord.  # noqa: E501


        :return: The title of this WosLiteRecord.  # noqa: E501
        :rtype: WosLiteRecordTitle
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this WosLiteRecord.


        :param title: The title of this WosLiteRecord.  # noqa: E501
        :type: WosLiteRecordTitle
        """

        self._title = title

    @property
    def doctype(self):
        """Gets the doctype of this WosLiteRecord.  # noqa: E501


        :return: The doctype of this WosLiteRecord.  # noqa: E501
        :rtype: Doctype
        """
        return self._doctype

    @doctype.setter
    def doctype(self, doctype):
        """Sets the doctype of this WosLiteRecord.


        :param doctype: The doctype of this WosLiteRecord.  # noqa: E501
        :type: Doctype
        """

        self._doctype = doctype

    @property
    def source(self):
        """Gets the source of this WosLiteRecord.  # noqa: E501


        :return: The source of this WosLiteRecord.  # noqa: E501
        :rtype: Source
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this WosLiteRecord.


        :param source: The source of this WosLiteRecord.  # noqa: E501
        :type: Source
        """

        self._source = source

    @property
    def author(self):
        """Gets the author of this WosLiteRecord.  # noqa: E501


        :return: The author of this WosLiteRecord.  # noqa: E501
        :rtype: Author
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this WosLiteRecord.


        :param author: The author of this WosLiteRecord.  # noqa: E501
        :type: Author
        """

        self._author = author

    @property
    def keyword(self):
        """Gets the keyword of this WosLiteRecord.  # noqa: E501


        :return: The keyword of this WosLiteRecord.  # noqa: E501
        :rtype: Keyword
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """Sets the keyword of this WosLiteRecord.


        :param keyword: The keyword of this WosLiteRecord.  # noqa: E501
        :type: Keyword
        """

        self._keyword = keyword

    @property
    def other(self):
        """Gets the other of this WosLiteRecord.  # noqa: E501


        :return: The other of this WosLiteRecord.  # noqa: E501
        :rtype: Other
        """
        return self._other

    @other.setter
    def other(self, other):
        """Sets the other of this WosLiteRecord.


        :param other: The other of this WosLiteRecord.  # noqa: E501
        :type: Other
        """

        self._other = other

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WosLiteRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WosLiteRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
